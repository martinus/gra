#!/usr/bin/env python3

"""
gra - Git Repo Admin

The repository administrator helps organize and manage git repositories. It creates
directories based on the clone URL in a specified root directory, and has tools for
batch processing. gra's root location (default: ~/git) can be configured in your
~/.gitconfig, e.g. like so:

    git config --global gra.root ~/develop

A convenient alias to quickly move around the different repositories for your ~/.bashrc
This requires the fuzzy searcher 'fzf'.

    alias cdg='cd $(gra ls|fzf)'
"""

__version_info__ = ('0', '0', '1')
__version__ = '.'.join(__version_info__)

import argparse
import os
import subprocess
import json
import urllib.parse


class Log:
    BLUE = '\x1b[38;5;4m'
    CYAN = '\x1b[38;5;38m'
    GREEN = '\x1b[38;5;2m'
    YELLOW = '\x1b[38;5;3m'
    RED = '\x1b[38;5;1m'
    WHITE = '\x1b[38;5;7m'
    MAGENTA = '\x1b[38;5;5m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

    SHOW_LOG = True

    @staticmethod
    def info(str):
        if Log.SHOW_LOG:
            print(f'{Log.BLUE}{str}{Log.ENDC}')

    @staticmethod
    def ok(str):
        if Log.SHOW_LOG:
            print(f'{Log.GREEN}{str}{Log.ENDC}')

    @staticmethod
    def header(str):
        if Log.SHOW_LOG:
            c = 'â”€'
            str = f'{c*2} {str} '
            print(f'{Log.BOLD}{Log.CYAN}{str.ljust(100, c)}{Log.ENDC}')


def fetch_root(fallback_root):
    path = fallback_root  # fallback if not configured
    try:
        path = subprocess.check_output(
            ["git", "config", "--get", "gra.root"], encoding='utf-8').strip()
    except subprocess.CalledProcessError:
        # no config, use default
        pass

    # make sure both e.g. ~/git and $HOME/git works
    return os.path.expandvars(os.path.expanduser(path))


class GitRepoAdmin:
    def __init__(self, args, db_file_name, root):
        self._args = args
        self._db_file_name = os.path.expandvars(
            os.path.expanduser(db_file_name))
        self._root_path = os.path.expandvars(os.path.expanduser(root))

    def _url_to_path(self, url):
        """
        Converts an URL, e.g. "https://github.com/martinus/nanobench.git"
        into an absolute directory
        """
        parsed_url = urllib.parse.urlparse(url)
        target_path = os.path.join(
            self._root_path, parsed_url.netloc) + parsed_url.path
        target_path = target_path.removesuffix('.git')
        return target_path

    def _db_repositories(self):
        """
        Goes through all the repositories in the database, and yields the path
        if the directory actually exists.
        """
        repos = []
        with open(self._db_file_name) as f:
            data = json.load(f)
            for repo in data['repositories']:
                if os.path.exists(repo):
                    repos.append(repo)
        return repos

    def _db_add_path(self, path_to_add):
        """
        Adds a single repository to the database. Also keeps the list sorted.
        """
        with open(self._db_file_name, "r+") as db_file:
            # read
            data = json.load(db_file)
            repos = data['repositories']
            # add path
            repos.append(path_to_add)
            repos.sort(key=str.lower)
            # write
            db_file.seek(0)
            db_file.truncate(0)
            db_file.write(json.dumps(data, indent='\t'))

    # commands ############################

    def _clone(self):
        """
        Clones one or more URLs and upates the database after each update.
        """
        for idx, url in enumerate(self._args.url):
            path = self._url_to_path(url)
            try:
                os.makedirs(path)
            except FileExistsError:
                # just continue, git only allows cloning into an empty directory anyways
                pass

            Log.info(f"{idx+1}/{len(self._args.url)} Cloning '{url}")
            subprocess.run(["git",
                            "clone",
                            "--recurse-submodules",
                            "--remote-submodules",
                            url,
                            path])
            self._db_add_path(path)

    def _replace(self, haystack, needle, replacement):
        ary = []
        for s in haystack:
            ary.append(s.replace(needle, replacement))
        return ary

    def _each(self):
        """
        Executes a command in each of the repositories paths
        """
        Log.info(f"running '{' '.join(self._args.exec)}' in each repository")
        repos = self._db_repositories()

        # replace all occurances of {{GRA_ROOT}}
        exec = self._replace(self._args.exec, '{{GRA_ROOT}}', self._root_path)
        for idx, repo in enumerate(repos):
            Log.header(f'{idx + 1}/{len(repos)} {repo}')
            final_exec = self._replace(exec, '{{GRA_REPO}}', repo)
            subprocess.run(final_exec, cwd=repo)

    def _ls(self):
        """
        Just print each repository, useful with e.g. xargs or fzf.
        """
        for repo in self._db_repositories():
            print(repo)

    def _db_update(self):
        """
        Walks throgh the whole directory tree in the root to find all directories
        that contain a .git. These are then set as the repositories in the database
        """
        # collect all repositories
        repos = []
        for root, dirs, _ in os.walk(self._root_path):
            if '.git' in dirs:
                Log.info(f"found '{root}'")
                repos.append(root)
                dirs.clear()

        # sort it case insensitive
        repos.sort(key=str.lower)

        # write json
        with open(os.path.expanduser(self._db_file_name), 'w') as db_file:
            data = {"repositories": repos}
            db_file.write(json.dumps(data, indent='\t'))

        Log.ok(
            f"found {len(repos)} repositories in '{self._root_path}', updated '{self._db_file_name}'")

    def _vscode_projectmanager(self):
        """
        Generates content for VSCode Project Manager
        """
        # load existing config
        if self._args.insiders:
            app_name = "Code - Insiders"
        else:
            app_name = "Code"

        name_postfix = ""
        repo_prefix = ""
        more_tag = None
        if self._args.remote:
            name_postfix = " ðŸ’»"
            repo_prefix = f"vscode-remote://ssh-remote+{self._args.remote}"
            more_tag = "remote ðŸ’»"

        # create a map from repo root to its data
        root_paths = set()

        projects_to_add = []
        for repo in self._db_repositories():
            relative_path = os.path.relpath(repo, self._root_path)
            path_components = relative_path.split(os.sep)
            netloc = path_components[0]
            name = os.sep.join(path_components[-2:])

            tags = [netloc]
            if more_tag:
                tags.append(more_tag)

            root_paths.add(repo)
            projects_to_add.append({
                "name": f'{name}{name_postfix}',
                "rootPath": f'{repo_prefix}{repo}',
                "paths": [],
                "tags": tags,
                "enabled": True,
            })

        if self._args.remote:
            # remote specified, print the names
            print(json.dumps(projects_to_add, indent='\t'))
        else:
            # no remote specified, update local file
            fn = os.path.expanduser(
                f'~/.config/{app_name}/User/globalStorage/alefragnani.project-manager/projects.json')
            with open(fn, "r+") as projects_file:
                projects_loaded = json.load(projects_file)

                # remove all projects from the loaded ones that will be added, then add them
                projects = list(filter(
                    lambda proj: not proj["rootPath"] in root_paths, projects_loaded))
                projects += projects_to_add

                # update the config file
                projects_file.seek(0)
                projects_file.truncate(0)
                projects_file.write(json.dumps(projects, indent='\t'))

            Log.ok(
                f"wrote {len(projects)} projects ({len(projects_to_add)} from gra) into '{fn}'")

    def process(self):
        match args.cmd:
            case 'clone':
                self._clone()
            case 'ls':
                self._ls()
            case 'root':
                print(self._root_path)
            case 'each':
                self._each()
            case 'updatedb':
                self._db_update()
            case 'vscode':
                self._vscode_projectmanager()


if __name__ == '__main__':
    db_file_name = '~/.config/gra.db.json'
    fallback_root = '~/git'

    root = fetch_root(fallback_root)

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-q', '--quiet', action='store_true',
                        help='do not print any status information')
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s ' + __version__)

    subparsers = parser.add_subparsers(
        required=True, dest='cmd', title='commands')

    # clone
    parser_clone = subparsers.add_parser('clone',
                                         formatter_class=argparse.RawTextHelpFormatter,
                                         help=f'clone one or more remote repository',
                                         description=f'''
Clones one or more repository into the gra root directory '{root}'. The
repository directory is created based on the URL and it is registered into
gra's database.
''')
    parser_clone.add_argument('url', nargs='+',
                              help='one or more git repository URLs to clone')

    # each
    parser_each = subparsers.add_parser('each',
                                        formatter_class=argparse.RawTextHelpFormatter,
                                        help='run a command in the working directory of each repository',
                                        description=f'''
Runs the given command with all arguments for each repository. The working directory of each command
is its repository, and the commands can use these strings which are automatically replaced:

{{{{GRA_ROOT}}}}: Replaced by gra root directory '{root}'.
{{{{GRA_REPO}}}}: Replaced by the full path of each repository.

Here are examples that you can try. Show short git status of each repository:

    gra each git status -sb

Show disk usage of each repository. I use {{{{GRA_REPO}}}} so `du` shows the path, and the argument -q
to hide gra's status output:

    gra -q each du -h -d0 {{{{GRA_REPO}}}}
''')
    parser_each.add_argument('exec', nargs=argparse.REMAINDER,
                             help='the command')

    # ls
    parser_ls = subparsers.add_parser('ls',
                                      formatter_class=argparse.RawTextHelpFormatter,
                                      help=f'list all repositories',
                                      description=f'''
Simply list all repositories. The list is updated automatically on each clone,
but if you add/remove repositories without the script, run `updatedb` to
update the index. This command can be helpful with e.g. fzf. Here is a handy
alias to quickly change directory into one of the repositories:

    alias cdg = 'cd $(gra ls|fzf)'
''')
    parser_ls.add_argument('path', default=root, nargs='?',
                           help=f'directory walked to find all repositories (default: \'{root}\')')

    # updatedb
    parser_updatedb = subparsers.add_parser('updatedb',
                                            formatter_class=argparse.RawTextHelpFormatter,
                                            help=f'crawls the gra root to update the list of repositories',
                                            description=f'''
Walks through the whole directory tree in the root path '{root}' to find all
directories that contain a '.git' folder. These are then set as the repositories
in the database.

Usually there is no need to call that command, unless you add repositories without the
'clone' command. The repositories are then sorted and stored into '{db_file_name}'.
''')

    # root
    parser_root = subparsers.add_parser('root',
                                        formatter_class=argparse.RawTextHelpFormatter,
                                        help=f'shows repository root, currently \'{root}\'',
                                        description=f'''
Prints the root path used by gra. The path is configured in the global
~/.gitconfig. If not configured, the default is '{fallback_root}'. Set the
configuration with e.g.

    git config --global gra.root ~/git

This root folder is used as the base for all commands.
''')

    parser_vscode_projectmanager = subparsers.add_parser('vscode',
                                                         formatter_class=argparse.RawTextHelpFormatter,
                                                         help='generate list of projects for VSCode Project Manager',
                                                         description=f'''
Requires Visual Studio Code with the Project Manager extension, available here:
https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager

This adds each repository to the project manager, with the netlocation as tag,
and last two subdirectories as a name. Existing configuration is kept as-is.
''')
    parser_vscode_projectmanager.add_argument('-i', '--insiders', action='store_true',
                                              help='generate for VSCode Insiders')
    parser_vscode_projectmanager.add_argument('-r', '--remote',
                                              help='print for remote hosts')

    # do it
    args = parser.parse_args()
    Log.SHOW_LOG = not args.quiet

    gra = GitRepoAdmin(args, db_file_name, root)
    gra.process()
